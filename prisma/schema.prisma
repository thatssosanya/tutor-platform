// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

enum QuestionSource {
    FIPI
    AI
    USER
}

enum SolutionType {
    SHORT
    LONG
    MULTICHOICE
    MULTIRESPONSE
    MULTICHOICEGROUP
}

model User {
    id String @id @unique @default(cuid())

    name        String    @unique
    displayName String
    password    String
    permissions Int
    subjects    Subject[]

    creatorId String?
    creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])
    students  User[]  @relation("CreatedBy")

    createdQuestions Question[]
    createdTests     Test[]

    assignmentsGiven    Assignment[] @relation("AssignedBy")
    assignmentsReceived Assignment[] @relation("AssignedTo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subject {
    id String @id @unique @default(cuid())

    name String

    questions Question[]
    topics    Topic[]
    tests     Test[]
    users     User[]
}

model Topic {
    id        String
    subjectId String

    name String

    subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

    parentId String?

    parent   Topic?  @relation("TopicHierarchy", fields: [parentId, subjectId], references: [id, subjectId])
    children Topic[] @relation("TopicHierarchy")

    questions QuestionOnTopic[]

    @@id([id, subjectId])
}

model QuestionOnTopic {
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    topicId   String
    subjectId String
    topic     Topic  @relation(fields: [topicId, subjectId], references: [id, subjectId], onDelete: Cascade)

    @@id([questionId, topicId, subjectId])
}

model Question {
    id String @id @unique @default(cuid())

    name            String
    prompt          String
    body            String?
    solutionPostfix String?
    work            String?
    hint            String?
    solution        String?
    solutionType    SolutionType
    source          QuestionSource @default(FIPI)
    sourcePosition  Int?
    examPosition    Int?

    creatorId String?
    creator   User?   @relation(fields: [creatorId], references: [id])

    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])

    topics QuestionOnTopic[]

    attachments Attachment[]
    options     Option[]

    testEntries    TestQuestion[]
    studentAnswers StudentAnswer[]

    verified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Attachment {
    id String @id @unique @default(cuid())

    url String

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Option {
    id String @id @unique @default(cuid())

    body String

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Test {
    id String @id @default(cuid())

    name         String
    disableHints Boolean @default(false)

    creatorId String
    creator   User   @relation(fields: [creatorId], references: [id])

    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])

    questions TestQuestion[]

    assignments Assignment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestQuestion {
    id String @id @default(cuid())

    order Float

    testId     String
    test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([testId, questionId])
    @@unique([testId, order])
}

model Assignment {
    id String @id @default(cuid())

    dueAt       DateTime?
    completedAt DateTime?

    testId String
    test   Test   @relation(fields: [testId], references: [id])

    assignedById String
    assignedBy   User   @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: Cascade)
    assignedToId String
    assignedTo   User   @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: Cascade)

    answers StudentAnswer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudentAnswer {
    id String @id @default(cuid())

    answer    String
    isCorrect Boolean @default(false)

    assignmentId String
    assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    questionId   String
    question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([assignmentId, questionId])
}
